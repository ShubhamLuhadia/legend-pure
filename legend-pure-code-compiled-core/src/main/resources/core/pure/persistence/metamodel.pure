import meta::legend::service::metamodel::*;

import meta::pure::persistence::metamodel::*;
import meta::pure::persistence::metamodel::backend::*;
import meta::pure::persistence::metamodel::batch::*;
import meta::pure::persistence::metamodel::batch::audit::*;
import meta::pure::persistence::metamodel::batch::deduplication::*;
import meta::pure::persistence::metamodel::batch::mode::*;
import meta::pure::persistence::metamodel::batch::mode::appendonly::*;
import meta::pure::persistence::metamodel::batch::mode::delta::*;
import meta::pure::persistence::metamodel::batch::mode::delta::merge::*;
import meta::pure::persistence::metamodel::batch::mode::snapshot::*;
import meta::pure::persistence::metamodel::batch::targetspecification::*;
import meta::pure::persistence::metamodel::batch::transactionmilestoning::*;
import meta::pure::persistence::metamodel::batch::validitymilestoning::*;
import meta::pure::persistence::metamodel::batch::validitymilestoning::derivation::*;
import meta::pure::persistence::metamodel::reader::*;
import meta::pure::persistence::metamodel::trigger::*;
import meta::pure::persistence::metamodel::ownership::*;
import meta::pure::persistence::metamodel::runner::*;
import meta::pure::persistence::metamodel::policy::*;

/**********
 * persistence pipe
 **********/

Class
{doc.doc = 'A persistence pipe specification. This consists of a trigger that initiates the pipe, a reader that provides data to the pipe, and a persister that writes that data to a datastore.'}
meta::pure::persistence::metamodel::PersistencePipe extends PackageableElement
{
   {doc.doc = 'A functional description of this pipe specification.'}
   documentation: String[1];

   {doc.doc = 'Owners of this pipe specification.'}
   owners: String[1..*];

   {doc.doc = 'The trigger that initiates the pipe.'}
   trigger: Trigger[1];

   {doc.doc = 'The reader that sources input data for the pipe.'}
   reader: Reader[1];

   {doc.doc = 'The persister that writes data to a datastore.'}
   persister: Persister[1];
}

/**********
 * backend
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'The mapping of a persistence pipe specification to a backend system for execution.'}
meta::pure::persistence::metamodel::PersistencePipeBackend extends PackageableElement
{
   persistencePipe: PersistencePipe[1];
}

Class
{doc.doc = 'Backend details for executing on the AWS Glue managed ETL service.'}
meta::pure::persistence::metamodel::AwsGluePersistencePipeBackend extends PersistencePipeBackend
{
}

/**********
 * trigger
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'An event that may initiate a persistence pipe.'}
meta::pure::persistence::metamodel::trigger::Trigger
{
}

Class
{doc.doc = 'A trigger defined by the underlying system.'}
meta::pure::persistence::metamodel::trigger::OpaqueTrigger extends Trigger
{
}

/**********
 * reader
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'The provider of input data to persist.'}
meta::pure::persistence::metamodel::reader::Reader
{
}

Class
{doc.doc = 'A loader that uses a service to provide data.'}
meta::pure::persistence::metamodel::reader::ServiceReader extends Reader
{
   {doc.doc = 'The underlying service that provides data.'}
   service: Service[1];
}

/**********
 * writer
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'The persistence logic to execute on input data.'}
meta::pure::persistence::metamodel::Persister
{
}

Class
{doc.doc = 'Persister that writes data in a continuous stream.'}
meta::pure::persistence::metamodel::streaming::StreamingPersister extends Persister
{
}

Class
{doc.doc = 'Persister that writes data in batches.'}
meta::pure::persistence::metamodel::batch::BatchPersister extends Persister
{
   targetSpecification: TargetSpecification[1];
}

/**********
 * target specification
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'A target datastore for a batch persistence.'}
meta::pure::persistence::metamodel::batch::targetspecification::TargetSpecification
{
   {doc.doc = 'A class that models the persistence target. Concrete target specifications impose specific requirements on the shape of the class.'}
   modelClass: Class<Any>[1];
}

Class
{doc.doc = 'Specification for a single flat dataset. The model class must have primitive properties with single multiplicity.'}
meta::pure::persistence::metamodel::batch::targetspecification::FlatTargetSpecification extends TargetSpecification
{
   {doc.doc = 'The name of the target.'}
   targetName: String[1];

   {doc.doc = 'An optional set of properties in the model class that designate partitioning keys for the dataset.'}
   partitionProperties: Property<Nil, Any|1>[*];

   {doc.doc = 'The deduplication strategy to apply to this target dataset when an item appears multiple times in the same batch.'}
   deduplicationStrategy: DeduplicationStrategy[1];

   {doc.doc = 'The batch milestoning mode to apply to this target dataset.'}
   batchMilestoningMode: BatchMilestoningMode[1];
}

Class
{doc.doc = 'Specification for a group of flat datasets. The model class must be nested one level deep; each property of the class must point to a flat class with primitive properties that have single multiplicity.'}
meta::pure::persistence::metamodel::batch::targetspecification::GroupedFlatTargetSpecification extends TargetSpecification
{
   {doc.doc = 'The transaction granularity for the target group.'}
   transactionScope: TransactionScope[1];

   {doc.doc = 'Components of this grouped flat target specification. Each component maps a property of the model class to a flat target specification.'}
   components: PropertyAndFlatTargetSpecification[1..*];
}

Class
{doc.doc = 'A property to flat target specification mapping used to specify a component of a GroupedFlatTargetSpecification.'}
meta::pure::persistence::metamodel::batch::targetspecification::PropertyAndFlatTargetSpecification
{
   {doc.doc = 'The property in the parent GroupedFlatTargetSpecification\'s model class that points to the model class for the component FlatTargetSpecification.'}
   property: Property<Nil, Any|1>[1];

   {doc.doc = 'The specification for the component flat dataset.'}
   targetSpecification: FlatTargetSpecification[1];
}

Class
{doc.doc = 'Specification for a nested data object. The model class may be an arbitrarily deeply nested with primitive or complex properties of any multiplicity.'}
meta::pure::persistence::metamodel::batch::targetspecification::NestedTargetSpecification extends TargetSpecification
{
   {doc.doc = 'The name of the target.'}
   targetName: String[1];
}

Enum
{doc.doc = 'The transaction granularity for persistence operations.'}
meta::pure::persistence::metamodel::batch::targetspecification::TransactionScope
{
   {doc.doc = 'Each target in the multi-target specification executes in its own transaction; each succeeds or fails independently.'}
   SINGLE_TARGET,

   {doc.doc = 'All targets in the multi-target specification execute in a single transaction; all succeed or fail together.'}
   ALL_TARGETS
}

/**********
 * deduplication strategy
 **********/

Class
<<typemodifiers.abstract>>
meta::pure::persistence::metamodel::batch::deduplication::DeduplicationStrategy
{
}

Class meta::pure::persistence::metamodel::batch::deduplication::NoDeduplicationStrategy extends DeduplicationStrategy
{
}

Class meta::pure::persistence::metamodel::batch::deduplication::AnyVersionDeduplicationStrategy extends DeduplicationStrategy
{
}

Class meta::pure::persistence::metamodel::batch::deduplication::MaxVersionDeduplicationStrategy extends DeduplicationStrategy
{
   versionProperty: Property<Nil, Any|1>[1];
}

Class meta::pure::persistence::metamodel::batch::deduplication::OpaqueDeduplicationStrategy extends DeduplicationStrategy
{
}

/**********
 * batch mode
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'The batch milestoning strategy to apply.'}
meta::pure::persistence::metamodel::batch::mode::BatchMilestoningMode
{
}

/**********
 * batch mode - snapshot
 **********/

Class
{doc.doc = 'Values in the incoming batch represent the full dataset and will replace the existing dataset destructively.'}
meta::pure::persistence::metamodel::batch::mode::snapshot::NonMilestonedSnapshot extends BatchMilestoningMode
{
   auditing: Auditing[1];
}

Class
{doc.doc = 'Values in the incoming batch represent the full dataset and will replace the existing dataset non-destructively. New incoming values represent a logical create; updated incoming values represent a logical update; missing incoming values represent a logical delete in the transaction (processing) dimension. The data have only a transaction (processing) dimension and no validity (business) dimension.'}
meta::pure::persistence::metamodel::batch::mode::snapshot::UnitemporalSnapshot extends BatchMilestoningMode
{
   transactionMilestoning: TransactionMilestoning[1];
}

Class
{doc.doc = 'Values in the incoming batch represent the full dataset and will replace the existing dataset non-destructively. New incoming values represent a logical create; updated incoming values represent a logical update; missing incoming values represent a logical delete in the transaction (processing) dimension. The data have a transaction (processing) dimension and a validity (business) dimension.'}
meta::pure::persistence::metamodel::batch::mode::snapshot::BitemporalSnapshot extends BatchMilestoningMode
{
   transactionMilestoning: TransactionMilestoning[1];
   validityMilestoning: ValidityMilestoning[1];
   validityDerivation: ValidityDerivation[1];
}

/**********
 * batch mode - delta
 **********/

Class
{doc.doc = 'Values in the incoming batch represent a delta to be applied on top of the existing dataset destructively. New incoming values are appended. Updated incoming values overwrite existing ones. Missing incoming values result in a no-op.'}
meta::pure::persistence::metamodel::batch::mode::delta::NonMilestonedDelta extends BatchMilestoningMode
{
   auditing: Auditing[1];
}

Class
{doc.doc = 'Values in the incoming batch represent a delta to be applied on top of the existing dataset non-destructively. New incoming values represent a logical create; updated incoming values represent a logical update; missing incoming values represent a no-op in the transaction (processing) dimension. Additional merge semantics, including logical deletes, can be supported via a merge scheme. The data have only a transaction (processing) dimension and no validity (business) dimension.' }
meta::pure::persistence::metamodel::batch::mode::delta::UnitemporalDelta extends BatchMilestoningMode
{
   mergeStrategy: MergeStrategy[1];
   transactionMilestoning: TransactionMilestoning[1];
}

Class
{doc.doc = 'Values in the incoming batch represent a delta to be applied on top of the existing dataset non-destructively. New incoming values represent a logical create; updated incoming values represent a logical update; missing incoming values represent a no-op in the transaction (processing) dimension. Additional merge semantics, including logical deletes, can be supported via a merge scheme. The data have a transaction (processing) dimension and a validity (business) dimension.' }
meta::pure::persistence::metamodel::batch::mode::delta::BitemporalDelta extends BatchMilestoningMode
{
   mergeStrategy: MergeStrategy[1];
   transactionMilestoning: TransactionMilestoning[1];
   validityMilestoning: ValidityMilestoning[1];
   validityDerivation: ValidityDerivation[1];
}

// merge strategy

Class
<<typemodifiers.abstract>>
meta::pure::persistence::metamodel::batch::mode::delta::merge::MergeStrategy
{
}

Class
meta::pure::persistence::metamodel::batch::mode::delta::merge::NoDeletesMergeStrategy extends MergeStrategy
{
}

Class
meta::pure::persistence::metamodel::batch::mode::delta::merge::DeleteIndicatorMergeStrategy extends MergeStrategy
{
   deleteProperty: Property<Nil, Any|1>[1];
   deleteValues: String[1..*];
}

Class
meta::pure::persistence::metamodel::batch::mode::delta::merge::OpaqueMergeStrategy extends MergeStrategy
{
}

/**********
 * batch mode - append only
 **********/

Class
{doc.doc = 'Values in the incoming batch are appended to the existing dataset. No updates or deletes occur. Duplicates may optionally be filtered out.'}
meta::pure::persistence::metamodel::batch::mode::appendonly::AppendOnly extends BatchMilestoningMode
{
   auditing: Auditing[1];
   filterDuplicates: Boolean[1];
}

/**********
 * auditing
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'Strategy for representing audit information in the underlying system.'}
meta::pure::persistence::metamodel::batch::audit::Auditing
{
}

Class
{doc.doc = 'Audit information is not captured in the underlying system.'}
meta::pure::persistence::metamodel::batch::audit::NoAuditing extends Auditing
{
}

Class
{doc.doc = 'Audit information is represented via a transaction datetime in the underlying system.'}
meta::pure::persistence::metamodel::batch::audit::BatchDateTimeAuditing extends Auditing
{
   {doc.doc = 'The name of the property representing the transaction datetime in the underlying system.'}
   dateTimePropertyName: String[1];
}

Class
{doc.doc = 'Audit information is represented at the discretion of the underlying system.'}
meta::pure::persistence::metamodel::batch::audit::OpaqueAuditing extends Auditing
{
}

/**********
 * transaction milestoning
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'Strategy for representing the transaction (processing) temporal dimension in the underlying system.'}
meta::pure::persistence::metamodel::batch::transactionmilestoning::TransactionMilestoning
{
}

Class
{doc.doc = 'The representation of the transaction (processing) temporal dimension is via integral "in" and "out" batch ids.'}
meta::pure::persistence::metamodel::batch::transactionmilestoning::BatchIdTransactionMilestoning extends TransactionMilestoning
{
   {doc.doc = 'The name of the property representing the "in" batch id in the underlying system.'}
   batchIdInName: String[1];

   {doc.doc = 'The name of the property representing the "out" batch id in the underlying system.'}
   batchIdOutName: String[1];
}

Class
{doc.doc = 'The representation of the transaction (processing) temporal dimension is via "in" and "out" datetimes.'}
meta::pure::persistence::metamodel::batch::transactionmilestoning::DateTimeTransactionMilestoning extends TransactionMilestoning
{
   {doc.doc = 'The name of the property representing the "in" datetime in the underlying system.'}
   dateTimeInName: String[1];

   {doc.doc = 'The name of the property representing the "out" datetime in the underlying system.'}
   dateTimeOutName: String[1];
}

Class
{doc.doc = 'The representation of the transaction (processing) temporal dimension is via integral "in" and "out" batch ids and "in" and "out" datetimes.'}
meta::pure::persistence::metamodel::batch::transactionmilestoning::BatchIdAndDateTimeTransactionMilestoning extends TransactionMilestoning
{
   {doc.doc = 'The name of the property representing the "in" batch id in the underlying system.'}
   batchIdInName: String[1];

   {doc.doc = 'The name of the property representing the "out" batch id in the underlying system.'}
   batchIdOutName: String[1];

   {doc.doc = 'The name of the property representing the "in" datetime in the underlying system.'}
   dateTimeInName: String[1];

   {doc.doc = 'The name of the property representing the "out" datetime in the underlying system.'}
   dateTimeOutName: String[1];
}

Class
{doc.doc = 'The representation of the transaction (processing) temporal dimension is at the discretion of the implementing system.'}
meta::pure::persistence::metamodel::batch::transactionmilestoning::OpaqueTransactionMilestoning extends TransactionMilestoning
{
}

/**********
 * validity milestoning
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'Strategy for representing the validity (business) temporal dimension in the underlying system.'}
meta::pure::persistence::metamodel::batch::validitymilestoning::ValidityMilestoning
{
}

Class
{doc.doc = 'The representation of the validity (business) temporal dimension is via "from" and "thru" datetimes.'}
meta::pure::persistence::metamodel::batch::validitymilestoning::DateTimeValidityMilestoning extends ValidityMilestoning
{
   {doc.doc = 'The name of the property representing the "from" datetime in the underlying system.'}
   dateTimeFromName: String[1];

   {doc.doc = 'The name of the property representing the "thru" datetime in the underlying system.'}
   dateTimeThruName: String[1];
}

Class
{doc.doc = 'The representation of the validity (business) temporal dimension is at the discretion of the implementing system.'}
meta::pure::persistence::metamodel::batch::validitymilestoning::OpaqueValidityMilestoning extends ValidityMilestoning
{
}

// validity derivation from source data

Class
<<typemodifiers.abstract>>
{doc.doc = 'Strategy for representing the validity (business) temporal dimension in the underlying system.'}
meta::pure::persistence::metamodel::batch::validitymilestoning::derivation::ValidityDerivation
{
}

Class
{doc.doc = 'Source data provide validity from datetime.'}
meta::pure::persistence::metamodel::batch::validitymilestoning::derivation::SourceSpecifiesValidFromDate extends ValidityDerivation
{
   {doc.doc = 'The property in the model class that provides the "from" datetime for validity (business) temporal dimension.'}
   sourceDateTimeFromProperty: Property<Nil,  Any|1>[1];
}

Class
{doc.doc = 'Source data provide validity from and thru datetimes.'}
meta::pure::persistence::metamodel::batch::validitymilestoning::derivation::SourceSpecifiesValidFromAndThruDate extends ValidityDerivation
{
   {doc.doc = 'The property in the model class that provides the "from" datetime for the validity (business) temporal dimension.'}
   sourceDateTimeFromProperty: Property<Nil, Any|1>[1];

   {doc.doc = 'The property in the model class that provides the "thru" datetime for the validity (business) temporal dimension.'}
   sourceDateTimeThruProperty: Property<Nil, Any|1>[1];
}


/**********
 * Alloy Streaming - Backend
 **********/

Class
{doc.doc = 'Backend details for executing on the On Premise ETL Service.'}
meta::pure::persistence::metamodel::PipelinePersistencePipeBackend extends PersistencePipeBackend
{
   /*Todo: (luhads) Support governance as mandatory configuration*/

   {doc.doc = 'The property in the model class that provides the trigger of a pipeline.'}
   trigger: PipelineTrigger[1];

   {doc.doc = 'The property in the model class that provides the ownership of a pipeline.'}
   ownership: Ownership[1];

   {doc.doc = 'The property in the model class that provides the maintenance policy of a pipeline.'}
   policy: Policy[1];

   {doc.doc = 'The property in the model class that provides the user which would execute the pipeline.'}
   runner: User[1];
}

/**********
 * Alloy Streaming - Reader
 **********/

Class
{doc.doc = 'A Service reader with Alloy Streaming execution details.'}
meta::pure::persistence::metamodel::reader::PipelineServiceReader extends ServiceReader
{
    /*Todo: (luhads) Support input parameters for Alloy Services*/
    {doc.doc = 'Runtime specification for Service used within the Pipeline.'}
    serviceExecutionRuntime: PipelineServiceExecutionRuntime[1];
}

Class
<<typemodifiers.abstract>>
{doc.doc = 'Runtime specification for Service used within the Pipeline.'}
meta::pure::persistence::metamodel::reader::PipelineServiceExecutionRuntime
{
}

Class
<<typemodifiers.abstract>>
{doc.doc = 'Artifact details for embedded execution of Service used within the Pipeline.'}
meta::pure::persistence::metamodel::reader::PipelineServiceArtifactExecutionRuntime extends PipelineServiceExecutionRuntime 
{
    /*Todo: (luhads) Support input parameters for Alloy Services - what if they belong to different projects?*/
    groupId: String[1];
    artifactId: String[1];
    version: String[1];   
}

/**********
 * Alloy Streaming - Persister
 **********/

Class
{doc.doc = 'Alloy Streaming Persister that writes data in batches to a relational database sink.'}
meta::pure::persistence::metamodel::batch::PipelineRelationalDatabaseBatchPersister extends BatchPersister
{    
    {doc.doc = 'the name of the database corresponding to this target specification'}
    databaseName: String[1];

    {doc.doc = 'the name of the schema (optional) corresponding to this target specification'}
    schemaName: String[0..1];
}

Class
{doc.doc = 'Specification for a single flat dataset for a relational database sink.'}
meta::pure::persistence::metamodel::batch::targetspecification::PipelineRelationalDatabaseTargetSpecification extends FlatTargetSpecification
{
    {doc.doc = 'the name of the table corresponding to this target specification'}
    tableName: String[1];

    {doc.doc = 'the primary keys of the table corresponding to this target specification'}    
    primaryKeys: String[0..*];
}

/**********
 * Alloy Streaming - Trigger
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'Trigger details specific to Alloy Streaming pipelines.'}
meta::pure::persistence::metamodel::trigger::PipelineTrigger
{
}

Class
{doc.doc = 'A trigger defined by the provided schedule.'}
meta::pure::persistence::metamodel::trigger::ScheduledTrigger extends PipelineTrigger
{
    {doc.doc = 'the pattern describing the days on which to schedule an instance of the pipeline'}
    scheduleDays: String[1];

    {doc.doc = 'The first date to start scheduling the pipeline from'}
    startDate: StrictDate[1];

    {doc.doc = 'For the day specified by scheduleDays, at what exact time to schedule instances'}
    startTime: String[1];

    endDate: StrictDate[0..1];
    repeatCount: Integer[0..1];
    repeatIntervalMinutes: Integer[0..1];
    maxDurationMinutes: Integer[0..1];
}

/**********
 * Alloy Streaming - Ownership
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'Ownership details for accessing Alloy Streaming pipelines.'}
meta::pure::persistence::metamodel::ownership::Ownership
{
   {doc.doc = 'The unique name of the pipeline'}
   pipelineName: String[1];
}

Class
{doc.doc = 'System ID based ownership details for accessing Alloy Streaming pipelines.'}
meta::pure::persistence::metamodel::ownership::SystemIdBasedOwnership extends Ownership
{
   {doc.doc = 'The systemId that owns pipelines'}
   systemId: String[1];

   {doc.doc = 'The type of system that owns pipelines'}
   systemType: String[1];
}

/**********
 * Alloy Streaming - User
 **********/

Class
<<typemodifiers.abstract>>
{doc.doc = 'Run as User details for executing Alloy Streaming pipelines.'}
meta::pure::persistence::metamodel::runner::User
{
}

Class
{doc.doc = 'Local user to configure currently authenticated user for executing Alloy Streaming pipelines.'}
meta::pure::persistence::metamodel::runner::LocalUser extends User
{
}


Class
{doc.doc = 'System account user for executing Alloy Streaming pipelines.'}
meta::pure::persistence::metamodel::runner::SystemAccountUser extends User
{
   publicUserName: String[1];
   privateKeyVaultReference: String[1];
}

/**********
 * Alloy Streaming - Policy
 **********/

Class
{doc.doc = 'Policy specifying the maintenance configuration for a pipeline.'}
meta::pure::persistence::metamodel::policy::Policy
{
   {doc.doc = 'The details of notifying pipeline run updates'}
   notification: NotificationPolicy[1];
}

Class
<<typemodifiers.abstract>>
{doc.doc = 'Policy specifying the notification configuration for a pipeline.'}
meta::pure::persistence::metamodel::policy::NotificationPolicy
{
}

Class
{doc.doc = 'Policy specifying the email-based notification configuration for a pipeline.'}
meta::pure::persistence::metamodel::policy::EmailNotificationPolicy extends NotificationPolicy
{
    notifyees: String[1..*];
}
